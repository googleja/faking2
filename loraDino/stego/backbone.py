
import torch
import loraDino.stego.dino.vision_transformer as vits
from torch import nn
import numpy as np
from abc import ABC, abstractmethod
import math


def get_backbone(cfg):
    """
    Returns a selected STEGO backbone.
    After implementing the Backbone class for your backbone, add it to be returned from this function with a desired named.
    The backbone can then be used by specifying its name in the STEGO configuration file.
    """
    if not hasattr(cfg, "backbone"):
        raise ValueError("Could not find 'backbone' option in the config file. Please check it")
    if cfg.backbone == "dino":
        return DinoViT(cfg)
    else:
        raise ValueError("Backbone {} unavailable".format(cfg.backbone))


class Backbone(ABC, nn.Module):
    """
    Base class to provide an interface for new STEGO backbones.

    To add a new backbone for use in STEGO, add a new implementation of this class.
    """

    vit_name_long_to_short = {
        "vit_tiny": "T",
        "vit_small": "S",
        "vit_base": "B",
        "vit_large": "L",
        "vit_huge": "H",
        "vit_giant": "G",
    }

    # Initialize the backbone
    @abstractmethod
    def __init__(self, cfg):
        super().__init__()

    # Return the size of features generated by the backbone
    @abstractmethod
    def get_output_feat_dim(self) -> int:
        pass

    # Generate features for the given image
    @abstractmethod
    def forward(self, img):
        pass

    # Returh a name that identifies the type of the backbone
    @abstractmethod
    def get_backbone_name(self):
        pass


class DinoViT(Backbone):
    def __init__(self, cfg):
        super().__init__(cfg)
        self.cfg = cfg
        self.patch_size = self.cfg.patch_size
        self.backbone_type = self.cfg.backbone_type
        self.model = vits.__dict__[self.backbone_type](patch_size=self.patch_size, num_classes=0)
        for p in self.model.parameters():
            p.requires_grad = False
        self.model.eval().cuda()
        self.dropout = torch.nn.Dropout2d(p=np.clip(self.cfg.dropout_p, 0.0, 1.0))

        if self.backbone_type == "vit_small" and self.patch_size == 16:
            url = "dino_deitsmall16_pretrain/dino_deitsmall16_pretrain.pth"
        elif self.backbone_type == "vit_small" and self.patch_size == 8:
            url = "dino_deitsmall8_300ep_pretrain/dino_deitsmall8_300ep_pretrain.pth"
        elif self.backbone_type == "vit_base" and self.patch_size == 16:
            url = "dino_vitbase16_pretrain/dino_vitbase16_pretrain.pth"
        elif self.backbone_type == "vit_base" and self.patch_size == 8:
            url = "dino_vitbase8_pretrain/dino_vitbase8_pretrain.pth"
        else:
            raise ValueError("Model type {} unavailable with patch size {}".format(self.backbone_type, self.patch_size))

        # if cfg.pretrained_weights is not None:
        #     state_dict = torch.load(cfg.pretrained_weights, map_location="cpu")
        #     # remove `module.` prefix
        #     state_dict = {k.replace("module.", ""): v for k, v in state_dict.items()}
        #     # remove `backbone.` prefix induced by multicrop wrapper
        #     state_dict = {k.replace("backbone.", ""): v for k, v in state_dict.items()}
        #     msg = self.model.load_state_dict(state_dict, strict=False)
        #     print("Pretrained weights found at {} and loaded with msg: {}".format(cfg.pretrained_weights, msg))
        # else:
        print("Since no pretrained weights have been provided, we load the reference pretrained DINO weights.")
        state_dict = torch.hub.load_state_dict_from_url(url="https://dl.fbaipublicfiles.com/dino/" + url)
        self.model.load_state_dict(state_dict, strict=True)

        if self.backbone_type == "vit_small":
            self.n_feats = 384
        else:
            self.n_feats = 768

        # lora adapter, added by zzy
        self.lora_layer = list(range(len(self.model.blocks)))
        # create for storage, then we can init them or load weights
        self.w_As = []  # These are linear layers
        self.w_Bs = []

        # Here, we do the surgery
        r = 4
        for t_layer_i, blk in enumerate(self.model.blocks):
            # If we only want few lora layer instead of all
            if t_layer_i not in self.lora_layer:
                continue
            w_qkv_linear = blk.attn.qkv  # 取出每个block里的attn模块的qkv层
            self.dim = w_qkv_linear.in_features
            w_a_linear_q = nn.Linear(self.dim, r, bias=False)  # 降维q阵768-4
            w_b_linear_q = nn.Linear(r, self.dim, bias=False)  # 升维q阵4-768
            w_a_linear_v = nn.Linear(self.dim, r, bias=False)  # 降维v阵768-4
            w_b_linear_v = nn.Linear(r, self.dim, bias=False)  # 升维v阵4-768
            self.w_As.append(w_a_linear_q)
            self.w_Bs.append(w_b_linear_q)
            self.w_As.append(w_a_linear_v)
            self.w_Bs.append(w_b_linear_v)
            blk.attn.qkv = _LoRA_qkv(
                w_qkv_linear,
                w_a_linear_q,
                w_b_linear_q,
                w_a_linear_v,
                w_b_linear_v,
            )
        self.reset_parameters()
        print("lora Dino", self.model)

    def get_output_feat_dim(self):
        return self.n_feats

    def forward(self, img):
        self.model.eval()
        with torch.no_grad():
            assert img.shape[2] % self.patch_size == 0
            assert img.shape[3] % self.patch_size == 0

            # get selected layer activations
            feat, attn, qkv = self.model.get_intermediate_feat(img)
            feat, attn, qkv = feat[0], attn[0], qkv[0]

            feat_h = img.shape[2] // self.patch_size
            feat_w = img.shape[3] // self.patch_size

            image_feat = feat[:, 1:, :].reshape(feat.shape[0], feat_h, feat_w, -1).permute(0, 3, 1, 2)

        if self.cfg.dropout_p > 0:
            return self.dropout(image_feat)
        else:
            return image_feat

    def get_backbone_name(self):
        return "DINO-" + Backbone.vit_name_long_to_short[self.backbone_type] + "-" + str(self.patch_size)

    # added by zzy
    def reset_parameters(self) -> None:
        for w_A in self.w_As:
            nn.init.kaiming_uniform_(w_A.weight, a=math.sqrt(5))
        for w_B in self.w_Bs:
            nn.init.zeros_(w_B.weight)


class _LoRA_qkv(nn.Module):
    """In Dino it is implemented as
    self.qkv = nn.Linear(dim, dim * 3, bias=qkv_bias)
    B, N, C = x.shape
    qkv = self.qkv(x).reshape(B, N, 3, self.num_heads, self.head_dim).permute(2, 0, 3, 1, 4)
    q, k, v = qkv.unbind(0)
    """
    def __init__(
            self,
            qkv: nn.Module,
            linear_a_q: nn.Module,
            linear_b_q: nn.Module,
            linear_a_v: nn.Module,
            linear_b_v: nn.Module,
    ):
        super().__init__()
        self.qkv = qkv
        self.linear_a_q = linear_a_q
        self.linear_b_q = linear_b_q
        self.linear_a_v = linear_a_v
        self.linear_b_v = linear_b_v
        self.dim = qkv.in_features
        self.w_identity = torch.eye(qkv.in_features)

    def forward(self, x):
        qkv = self.qkv(x)  # B,N,3*org_C
        new_q = self.linear_b_q(self.linear_a_q(x))
        new_v = self.linear_b_v(self.linear_a_v(x))

        qkv[:, :, :self.dim] += new_q
        qkv[:, :, -self.dim:] += new_v
        return qkv